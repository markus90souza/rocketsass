generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String         @unique
  password            String
  avatarUrl           String?        @map("avatar_url")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  tokens              Token[]
  accounts            Account[]
  invite              Invite[]
  member_on           Member[]
  owner_organizations Organization[]
  owner_projects      Project[]

  @@map("users")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(cuid())
  provider          AccountProvider
  accountProviderId String          @unique @map("account_provider_id")
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(cuid())
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("tokens")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id             String       @id @default(cuid())
  email          String
  role           Role
  member         User?        @relation(fields: [userId], references: [id])
  userId         String?      @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id             String       @id @default(cuid())
  role           Role         @default(MEMBER)
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                       String    @id @default(cuid())
  name                     String
  slug                     String    @unique
  domain                   String?
  shouldAttachUserByDomain Boolean   @default(false) @map("should_attach_user_by_domain")
  avatarUrl                String    @map("avatar_url")
  user                     User      @relation(fields: [userId], references: [id])
  userId                   String    @map("user_id")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")
  invites                  Invite[]
  members                  Member[]
  projects                 Project[]

  @@map("organizations")
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String
  slug           String       @unique
  avatarUrl      String       @map("avatar_url")
  owner          User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("projects")
}
